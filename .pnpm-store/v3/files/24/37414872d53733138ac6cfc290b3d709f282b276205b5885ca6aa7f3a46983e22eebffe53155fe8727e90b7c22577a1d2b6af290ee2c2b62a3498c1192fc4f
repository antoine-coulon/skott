/**
 * @since 1.0.0
 */
import * as Equal from "@effect/data/Equal";
/**
 * @category models
 * @since 1.0.0
 */
export type Data<A extends Readonly<Record<string, any>> | ReadonlyArray<any>> = Readonly<A> & Equal.Equal;
/**
 * `Case` represents a datatype similar to a case class in Scala. Namely, a
 * datatype created using `Case` will, by default, provide an implementation
 * for a constructor, `Hash`, and `Equal`.
 *
 * @since 1.0.0
 * @category models
 */
export interface Case extends Equal.Equal {
}
export declare namespace Case {
    /**
     * @since 1.0.0
     * @category models
     */
    interface Constructor<A extends Case, T extends keyof A = never> {
        (args: Omit<A, T | keyof Equal.Equal> extends Record<PropertyKey, never> ? void : Omit<A, T | keyof Equal.Equal>): A;
    }
}
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const struct: <As extends Readonly<Record<string, any>>>(as: As) => Data<As>;
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const unsafeStruct: <As extends Readonly<Record<string, any>>>(as: As) => Data<As>;
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const tuple: <As extends readonly any[]>(...as: As) => Data<As>;
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const array: <As extends readonly any[]>(as: As) => Data<As>;
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const unsafeArray: <As extends readonly any[]>(as: As) => Data<As>;
declare const _case: <A extends Case>() => Case.Constructor<A, never>;
export { 
/**
 * Provides a constructor for the specified `Case`.
 *
 * @since 1.0.0
 * @category constructors
 */
_case as case };
/**
 * Provides a tagged constructor for the specified `Case`.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const tagged: <A extends Case & {
    _tag: string;
}>(tag: A["_tag"]) => Case.Constructor<A, "_tag">;
/**
 * Provides a Tagged constructor for a Case Class.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const TaggedClass: <Key extends string>(tag: Key) => <A extends Record<string, any>>() => new (args: Omit<A, keyof Equal.Equal>) => Data<A & {
    _tag: Key;
}>;
/**
 * Provides a constructor for a Case Class.
 *
 * @since 1.0.0
 * @category constructors
 */
export declare const Class: <A extends Record<string, any>>() => new (args: Omit<A, keyof Equal.Equal>) => Data<A>;
//# sourceMappingURL=Data.d.ts.map